<p class="mw-empty-elt">
</p>
<p><b>Python</b> is a high-level, interpreted, general-purpose programming language. Its design philosophy emphasizes
    code readability with the use of significant indentation.</p>
<p>Python is dynamically-typed and garbage-collected. It supports multiple programming paradigms, including structured
    (particularly procedural), object-oriented and functional programming. It is often described as a "batteries
    included" language due to its comprehensive standard library.</p>
<p>Guido van Rossum began working on Python in the late 1980s as a successor to the ABC programming language and first
    released it in 1991 as Python 0.9.0. Python 2.0 was released in 2000 and introduced new features such as list
    comprehensions, cycle-detecting garbage collection, reference counting, and Unicode support. Python 3.0, released in
    2008, was a major revision that is not completely backward-compatible with earlier versions. Python 2 was
    discontinued with version 2.7.18 in 2020.</p>
<p>Python consistently ranks as one of the most popular programming languages.</p>

<h2>History</h2>
<p>Python was conceived in the late 1980s by Guido van Rossum at Centrum Wiskunde &amp; Informatica (CWI) in the
    Netherlands as a successor to the ABC programming language, which was inspired by SETL, capable of exception
    handling and interfacing with the Amoeba operating system. Its implementation began in December 1989. Van Rossum
    shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his
    "permanent vacation" from his responsibilities as Python's "benevolent dictator for life", a title the Python
    community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker. In
    January 2019, active Python core developers elected a five-member Steering Council to lead the project.</p>
<p>Python 2.0 was released on 16 October 2000, with many major new features. Python 3.0, released on 3 December 2008,
    with many of its major features backported to Python 2.6.x and 2.7.x. Releases of Python 3 include the
    <code>2to3</code> utility, which automates the translation of Python 2 code to Python 3.</p>
<p>Python 2.7's end-of-life was initially set for 2015, then postponed to 2020 out of concern that a large body of
    existing code could not easily be forward-ported to Python 3. No further security patches or other improvements will
    be released for it. With Python 2's end-of-life, only Python 3.6.x and later were supported. Later, support for 3.6
    was also discontinued. In 2021, Python 3.9.2 and 3.8.8 were expedited as all versions of Python (including 2.7) had
    security issues leading to possible remote code execution and web cache poisoning.</p>
<p>In 2022, Python 3.10.4 and 3.9.12 were expedited and so were older releases including 3.8.13, and 3.7.13 because of
    many security issues in 2022. Python 3.9.13 is the latest 3.9 version, and from now on 3.9 (and older; 3.8 and 3.7)
    will only get security updates.</p>

<h2>Design philosophy and features</h2>
<p>Python is a multi-paradigm programming language. Object-oriented programming and structured programming are fully
    supported, and many of its features support functional programming and aspect-oriented programming (including
    metaprogramming and metaobjects [magic methods] ). Many other paradigms are supported via extensions, including
    design by contract and logic programming.</p>
<p>Python uses dynamic typing and a combination of reference counting and a cycle-detecting garbage collector for memory
    management. It uses dynamic name resolution (late binding), which binds method and variable names during program
    execution.
</p>
<p>Its design offers some support for functional programming in the Lisp tradition. It has
    <code>filter</code>,<code>map</code>and<code>reduce</code> functions; list comprehensions, dictionaries, sets, and
    generator expressions. The standard library has two modules (<code>itertools</code> and <code>functools</code>) that
    implement functional tools borrowed from Haskell and Standard ML.</p>
<p>Its core philosophy is summarized in the document <i>The Zen of Python</i> (<i>PEP 20</i>), which includes aphorisms
    such as:</p>
<ul>
    <li>Beautiful is better than ugly.</li>
    <li>Explicit is better than implicit.</li>
    <li>Simple is better than complex.</li>
    <li>Complex is better than complicated.</li>
    <li>Readability counts.</li>
</ul>
<p>Rather than building all of its functionality into its core, Python was designed to be highly extensible via modules.
    This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing
    applications. Van Rossum's vision of a small core language with a large standard library and easily extensible
    interpreter stemmed from his frustrations with ABC, which espoused the opposite approach.</p>
<p>Python strives for a simpler, less-cluttered syntax and grammar while giving developers a choice in their coding
    methodology. In contrast to Perl's "there is more than one way to do it" motto, Python embraces a "there should be
    one—and preferably only one—obvious way to do it" philosophy. Alex Martelli, a Fellow at the Python Software
    Foundation and Python book author, wrote: "To describe something as 'clever' is <i>not</i> considered a compliment
    in the Python culture."</p>
<p>Python's developers strive to avoid premature optimization and reject patches to non-critical parts of the CPython
    reference implementation that would offer marginal increases in speed at the cost of clarity. When speed is
    important, a Python programmer can move time-critical functions to extension modules written in languages such as C;
    or use PyPy, a just-in-time compiler. Cython is also available, which translates a Python script into C and makes
    direct C-level API calls into the Python interpreter.
</p>
<p>Python's developers aim for it to be fun to use. This is reflected in its name—a tribute to the British comedy group
    Monty Python—and in occasionally playful approaches to tutorials and reference materials, such as examples that
    refer to spam and eggs (a reference to a Monty Python sketch) instead of the standard foo and bar.</p>
<p>A common neologism in the Python community is <i>pythonic</i>, which has a wide range of meanings related to program
    style. "Pythonic" code may use Python idioms well, be natural or show fluency in the language, or conform with
    Python's minimalist philosophy and emphasis on readability. Code that is difficult to understand or reads like a
    rough transcription from another programming language is called <i>unpythonic</i>.</p>
<p>Python users and admirers, especially those considered knowledgeable or experienced, are often referred to as
    <i>Pythonistas</i>.</p>

<h2>Syntax and semantics</h2>
<link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1033289096">
<p>Python is meant to be an easily readable language. Its formatting is visually uncluttered and often uses English
    keywords where other languages use punctuation. Unlike many other languages, it does not use curly brackets to
    delimit blocks, and semicolons after statements are allowed but rarely used. It has fewer syntactic exceptions and
    special cases than C or Pascal.</p>

<h3>Indentation</h3>
<link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1033289096">
<p>Python uses whitespace indentation, rather than curly brackets or keywords, to delimit blocks. An increase in
    indentation comes after certain statements; a decrease in indentation signifies the end of the current block. Thus,
    the program's visual structure accurately represents its semantic structure. This feature is sometimes termed the
    off-side rule. Some other languages use indentation this way; but in most, indentation has no semantic meaning. The
    recommended indent size is four spaces.</p>

<h3>Statements and control flow</h3>
<p>Python's statements include:
</p>
<ul>
    <li>The assignment statement, using a single equals sign <code>=</code></li>
    <li>The <code>if</code> statement, which conditionally executes a block of code, along with <code>else</code> and
        <code>elif</code> (a contraction of else-if)</li>
    <li>The <code>for</code> statement, which iterates over an iterable object, capturing each element to a local
        variable for use by the attached block</li>
    <li>The <code>while</code> statement, which executes a block of code as long as its condition is true</li>
    <li>The <code>try</code> statement, which allows exceptions raised in its attached code block to be caught and
        handled by <code>except</code> clauses (or new syntax <code>except*</code> in Python 3.11 for exception groups);
        it also ensures that clean-up code in a <code>finally</code> block is always run regardless of how the block
        exits</li>
    <li>The <code>raise</code> statement, used to raise a specified exception or re-raise a caught exception</li>
    <li>The <code>class</code> statement, which executes a block of code and attaches its local namespace to a class,
        for use in object-oriented programming</li>
    <li>The <code>def</code> statement, which defines a function or method</li>
    <li>The <code>with</code> statement, which encloses a code block within a context manager (for example, acquiring a
        lock before it is run, then releasing the lock; or opening and closing a file), allowing
        resource-acquisition-is-initialization (RAII)-like behavior and replacing a common try/finally idiom</li>
    <li>The <code>break</code> statement, which exits a loop</li>
    <li>The <code>continue</code> statement, which skips the current iteration and continues with the next</li>
    <li>The <code>del</code> statement, which removes a variable—deleting the reference from the name to the value, and
        producing an error if the variable is referred to before it is redefined</li>
    <li>The <code>pass</code> statement, serving as a NOP, syntactically needed to create an empty code block</li>
    <li>The <code>assert</code> statement, used in debugging to check for conditions that should apply</li>
    <li>The <code>yield</code> statement, which returns a value from a generator function (and also an operator); used
        to implement coroutines</li>
    <li>The <code>return</code> statement, used to return a value from a function</li>
    <li>The <code>import</code> statement, used to import modules whose functions or variables can be used in the
        current program</li>
</ul>
<p>The assignment statement (<code>=</code>) binds a name as a reference to a separate, dynamically-allocated object.
    Variables may subsequently be rebound at any time to any object. In Python, a variable name is a generic reference
    holder without a fixed data type; however, it always refers to <i>some</i> object with a type. This is called
    dynamic typing—in contrast to statically-typed languages, where each variable may contain only a value of a certain
    type.
</p>
<p>Python does not support tail call optimization or first-class continuations, and, according to van Rossum, it never
    will. However, better support for coroutine-like functionality is provided by extending Python's generators. Before
    2.5, generators were lazy iterators; data was passed unidirectionally out of the generator. From Python 2.5 on, it
    is possible to pass data back into a generator function; and from version 3.3, it can be passed through multiple
    stack levels.</p>

<h3>Expressions</h3>
<p>Some Python expressions are similar to those in languages such as C and Java, while some are not:
</p>
<ul>
    <li>Addition, subtraction, and multiplication are the same, but the behavior of division differs. There are two
        types of divisions in Python: floor division (or integer division) <code>//</code> and
        floating-point<code>/</code>division. Python also uses the <code>**</code> operator for exponentiation.</li>
    <li>The <code>@</code> infix operator. It is intended to be used by libraries such as NumPy for matrix
        multiplication.</li>
    <li>The syntax <code>:=</code>, called the "walrus operator", was introduced in Python 3.8. It assigns values to
        variables as part of a larger expression.</li>
    <li>In Python, <code>==</code> compares by value, versus Java, which compares numerics by value and objects by
        reference. Python's <code>is</code> operator may be used to compare object identities (comparison by reference),
        and comparisons may be chained—for example, <code class="mw-highlight mw-highlight-lang-python mw-content-ltr"
            id="" style=""
            dir="ltr"><span>a</span> <span>&lt;=</span> <span>b</span> <span>&lt;=</span> <span>c</span></code>.</li>
    <li>Python uses <code>and</code>, <code>or</code>, and <code>not</code> as boolean operators rather than the
        symbolic <code>&amp;&amp;</code>, <code>||</code>, <code>!</code> in Java and C.</li>
    <li>Python has a type of expression called a <i>list comprehension</i>, as well as a more general expression called
        a <i>generator expression</i>.</li>
    <li>Anonymous functions are implemented using lambda expressions; however, there may be only one expression in each
        body.</li>
    <li>Conditional expressions are written as <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" id=""
            style="" dir="ltr"><span>x</span> <span>if</span> <span>c</span> <span>else</span> <span>y</span></code>
        (different in order of operands from the <code>c ? x : y</code> operator common to many other languages).</li>
    <li>Python makes a distinction between lists and tuples. Lists are written as <code
            class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
            dir="ltr"><span>[</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>]</span></code>,
        are mutable, and cannot be used as the keys of dictionaries (dictionary keys must be immutable in Python).
        Tuples, written as <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
            dir="ltr"><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span></code>,
        are immutable and thus can be used as keys of dictionaries, provided all of the tuple's elements are immutable.
        The <code>+</code> operator can be used to concatenate two tuples, which does not directly modify their
        contents, but produces a new tuple containing the elements of both. Thus, given the variable <code>t</code>
        initially equal to <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
            dir="ltr"><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>)</span></code>,
        executing <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
            dir="ltr"><span>t</span> <span>=</span> <span>t</span> <span>+</span> <span>(</span><span>4</span><span>,</span> <span>5</span><span>)</span></code>
        first evaluates <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
            dir="ltr"><span>t</span> <span>+</span> <span>(</span><span>4</span><span>,</span> <span>5</span><span>)</span></code>,
        which yields <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
            dir="ltr"><span>(</span><span>1</span><span>,</span> <span>2</span><span>,</span> <span>3</span><span>,</span> <span>4</span><span>,</span> <span>5</span><span>)</span></code>,
        which is then assigned back to <code>t</code>—thereby effectively "modifying the contents" of <code>t</code>
        while conforming to the immutable nature of tuple objects. Parentheses are optional for tuples in unambiguous
        contexts.</li>
    <li>Python features <i>sequence unpacking</i> where multiple expressions, each evaluating to anything that can be
        assigned (to a variable, writable property, etc.) are associated in an identical manner to that forming tuple
        literals—and, as a whole, are put on the left-hand side of the equal sign in an assignment statement. The
        statement expects an <i>iterable</i> object on the right-hand side of the equal sign that produces the same
        number of values as the provided writable expressions; when iterated through them, it assigns each of the
        produced values to the corresponding expression on the left.</li>
    <li>Python has a "string format" operator <code>%</code> that functions analogously to <code>printf</code> format
        strings in C—e.g. <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
            dir="ltr"><span>"spam=</span><span>%s</span><span> eggs=</span><span>%d</span><span>"</span> <span>%</span> <span>(</span><span>"blah"</span><span>,</span> <span>2</span><span>)</span></code>
        evaluates to <code>"spam=blah eggs=2"</code>. In Python 2.6+ and 3+, this was supplemented by the
        <code>format()</code> method of the <code>str</code> class, e.g. <code
            class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
            dir="ltr"><span>"spam=</span><span>{0}</span><span> eggs=</span><span>{1}</span><span>"</span><span>.</span><span>format</span><span>(</span><span>"blah"</span><span>,</span> <span>2</span><span>)</span></code>.
        Python 3.6 added "f-strings": <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
            dir="ltr"><span>spam</span> <span>=</span> <span>"blah"</span><span>;</span> <span>eggs</span> <span>=</span> <span>2</span><span>;</span> <span>f</span><span>'spam=</span><span>{</span><span>spam</span><span>}</span><span> eggs=</span><span>{</span><span>eggs</span><span>}</span><span>'</span></code>.
    </li>
    <li>Strings in Python can be concatenated by "adding" them (with the same operator as for adding integers and
        floats), e.g. <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
            dir="ltr"><span>"spam"</span> <span>+</span> <span>"eggs"</span></code> returns <code>"spameggs"</code>. If
        strings contain numbers, they are added as strings rather than integers, e.g. <code
            class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
            dir="ltr"><span>"2"</span> <span>+</span> <span>"2"</span></code> returns <code>"22"</code>.</li>
    <li>Python has various string literals:
        <ul>
            <li>Delimited by <b>single or double quote marks</b>. Unlike in Unix shells, Perl, and Perl-influenced
                languages, single and double quote marks function identically. Both use the backslash (<code>\</code>)
                as an escape character. String interpolation became available in Python 3.6 as "formatted string
                literals".</li>
            <li><b>Triple-quoted</b> (beginning and ending with three single or double quote marks), which may span
                multiple lines and function like here documents in shells, Perl, and Ruby.</li>
            <li>Raw string varieties, denoted by prefixing the string literal with <code>r</code>. Escape sequences are
                not interpreted; hence raw strings are useful where literal backslashes are common, such as regular
                expressions and Windows-style paths. (Compare "<code>@</code>-quoting" in C#.)</li>
        </ul>
    </li>
    <li>Python has array index and array slicing expressions in lists, denoted as <code>a[key]</code>, <code
            class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
            dir="ltr"><span>a</span><span>[</span><span>start</span><span>:</span><span>stop</span><span>]</span></code>
        or <code class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
            dir="ltr"><span>a</span><span>[</span><span>start</span><span>:</span><span>stop</span><span>:</span><span>step</span><span>]</span></code>.
        Indexes are zero-based, and negative indexes are relative to the end. Slices take elements from the <i>start</i>
        index up to, but not including, the <i>stop</i> index. The third slice parameter, called <i>step</i> or
        <i>stride</i>, allows elements to be skipped and reversed. Slice indexes may be omitted—for example, <code
            class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
            dir="ltr"><span>a</span><span>[:]</span></code> returns a copy of the entire list. Each element of a slice
        is a shallow copy.</li>
</ul>
<p>In Python, a distinction between expressions and statements is rigidly enforced, in contrast to languages such as
    Common Lisp, Scheme, or Ruby. This leads to duplicating some functionality. For example:
</p>
<ul>
    <li>List comprehensions vs. <code>for</code>-loops</li>
    <li>Conditional expressions vs. <code>if</code> blocks</li>
    <li>The <code>eval()</code> vs. <code>exec()</code> built-in functions (in Python 2, <code>exec</code> is a
        statement); the former is for expressions, the latter is for statements</li>
</ul>
<p>Statements cannot be a part of an expression—so list and other comprehensions or lambda expressions, all being
    expressions, cannot contain statements. A particular case is that an assignment statement such as <code
        class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
        dir="ltr"><span>a</span> <span>=</span> <span>1</span></code> cannot form part of the conditional expression of
    a conditional statement. This has the advantage of avoiding a classic C error of mistaking an assignment operator
    <code>=</code> for an equality operator <code>==</code> in conditions: <code
        class="mw-highlight mw-highlight-lang-c mw-content-ltr" id="" style=""
        dir="ltr"><span>if</span><span> </span><span>(</span><span>c</span><span> </span><span>=</span><span> </span><span>1</span><span>)</span><span> </span><span>{</span><span> </span><span>...</span><span> </span><span>}</span><span></span></code>
    is syntactically valid (but probably unintended) C code, but <code
        class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
        dir="ltr"><span>if</span> <span>c</span> <span>=</span> <span>1</span><span>:</span> <span>...</span></code>
    causes a syntax error in Python.
</p>

<h3>Methods</h3>
<p>Methods on objects are functions attached to the object's class; the syntax <code
        class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
        dir="ltr"><span>instance</span><span>.</span><span>method</span><span>(</span><span>argument</span><span>)</span></code>
    is, for normal methods and functions, syntactic sugar for <code
        class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
        dir="ltr"><span>Class</span><span>.</span><span>method</span><span>(</span><span>instance</span><span>,</span> <span>argument</span><span>)</span></code>.
    Python methods have an explicit <code>self</code> parameter to access instance data, in contrast to the implicit
    self (or <code>this</code>) in some other object-oriented programming languages (e.g., C++, Java, Objective-C,
    Ruby). Python also provides methods, often called <i>dunder methods</i> (due to their names beginning and ending
    with double-underscores), to allow user-defined classes to modify how they are handled by native operations
    including length, comparison, in arithmetic operations and type conversion.</p>

<h3>Typing</h3>
<p>Python uses duck typing and has typed objects but untyped variable names. Type constraints are not checked at compile
    time; rather, operations on an object may fail, signifying that it is not of a suitable type. Despite being
    dynamically-typed, Python is strongly-typed, forbidding operations that are not well-defined (for example, adding a
    number to a string) rather than silently attempting to make sense of them.
</p>
<p>Python allows programmers to define their own types using classes, most often used for object-oriented programming.
    New instances of classes are constructed by calling the class (for example, <code
        class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
        dir="ltr"><span>SpamClass</span><span>()</span></code> or <code
        class="mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
        dir="ltr"><span>EggsClass</span><span>()</span></code>), and the classes are instances of the metaclass
    <code>type</code> (itself an instance of itself), allowing metaprogramming and reflection.
</p>
<p>Before version 3.0, Python had two kinds of classes (both using the same syntax): <i>old-style</i> and
    <i>new-style</i>, current Python versions only support the semantics new style.
</p>
<p>The long-term plan is to support gradual typing. Python's syntax allows specifying static types, but they are not
    checked in the default implementation, CPython. An experimental optional static type-checker, <i>mypy</i>, supports
    compile-time type checking.</p>

<h3>Arithmetic operations</h3>
<p>Python has the usual symbols for arithmetic operators (<code>+</code>, <code>-</code>, <code>*</code>,
    <code>/</code>), the floor division operator <code>//</code> and the modulo operation <code>%</code> (where the
    remainder can be negative, e.g. <code>4 % -3 == -2</code>). It also has <code>**</code> for exponentiation, e.g.
    <code>5**3 == 125</code> and <code>9**0.5 == 3.0</code>, and a matrix‑multiplication operator <code>@</code> . These
    operators work like in traditional math; with the same precedence rules, the operators infix (<code>+</code> and
    <code>-</code> can also be unary to represent positive and negative numbers respectively).
</p>
<p>The division between integers produces floating-point results. The behavior of division has changed significantly
    over time:</p>
<ul>
    <li>Current Python (i.e. since 3.0) changed <code>/</code> to always be floating-point division, e.g. <code
            class="nowrap mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
            dir="ltr"><span>5</span><span>/</span><span>2</span> <span>==</span> <span>2.5</span></code>.</li>
    <li>The floor division <code>//</code> operator was introduced. So <code>7//3 == 2</code>, <code>-7//3 == -3</code>,
        <code>7.5//3 == 2.0</code> and <code>-7.5//3 == -3.0</code>. Adding <code
            class="nowrap mw-highlight mw-highlight-lang-python2 mw-content-ltr" id="" style=""
            dir="ltr"><span>from</span> <span>__future__</span> <span>import</span> <span>division</span></code> causes
        a module used in Python 2.7 to use Python 3.0 rules for division (see above).</li>
</ul>
<p>In Python terms, <code>/</code> is <i>true division</i> (or simply <i>division</i>), and <code>//</code> is <i>floor
        division.</i> <code>/</code> before version 3.0 is <i>classic division</i>.</p>
<p>Rounding towards negative infinity, though different from most languages, adds consistency. For instance, it means
    that the equation <code class="nowrap mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
        dir="ltr"><span>(</span><span>a</span> <span>+</span> <span>b</span><span>)</span><span>//</span><span>b</span> <span>==</span> <span>a</span><span>//</span><span>b</span> <span>+</span> <span>1</span></code>
    is always true. It also means that the equation <code
        class="nowrap mw-highlight mw-highlight-lang-python mw-content-ltr" id="" style=""
        dir="ltr"><span>b</span><span>*</span><span>(</span><span>a</span><span>//</span><span>b</span><span>)</span> <span>+</span> <span>a</span><span>%</span><span>b</span> <span>==</span> <span>a</span></code>
    is valid for both positive and negative values of <code>a</code>. However, maintaining the validity of this equation
    means that while the result of <code>a%b</code> is, as expected, in the half-open interval [0, <i>b</i>), where
    <code>b</code> is a positive integer, it has to lie in the interval (<i>b</i>, 0] when <code>b</code> is negative.
</p>
<p>Python provides a <code>round</code> function for rounding a float to the nearest integer. For tie-breaking, Python 3
    uses round to even: <code>round(1.5)</code> and <code>round(2.5)</code> both produce <code>2</code>. Versions before
    3 used round-away-from-zero: <code>round(0.5)</code> is <code>1.0</code>, <code>round(-0.5)</code> is
    <code>−1.0</code>.</p>
<p>Python allows boolean expressions with multiple equality relations in a manner that is consistent with general use in
    mathematics. For example, the expression <code>a &lt; b &lt; c</code> tests whether <code>a</code> is less than
    <code>b</code> and <code>b</code> is less than <code>c</code>. C-derived languages interpret this expression
    differently: in C, the expression would first evaluate <code>a &lt; b</code>, resulting in 0 or 1, and that result
    would then be compared with <code>c</code>.</p>
<p>Python uses arbitrary-precision arithmetic for all integer operations. The <code>Decimal</code> type/class in the
    <code>decimal</code> module provides decimal floating-point numbers to a pre-defined arbitrary precision and several
    rounding modes. The <code>Fraction</code> class in the <code>fractions</code> module provides arbitrary precision
    for rational numbers.</p>
<p>Due to Python's extensive mathematics library, and the third-party library NumPy that further extends the native
    capabilities, it is frequently used as a scientific scripting language to aid in problems such as numerical data
    processing and manipulation.</p>

<h2>Programming examples</h2>
<p>Hello world program:
</p>

<p>Program to calculate the factorial of a positive integer:
</p>

<h2>Libraries</h2>
<p>Python's large standard library provides tools suited to many tasks, and is commonly cited as one of its greatest
    strengths. For Internet-facing applications, many standard formats and protocols such as MIME and HTTP are
    supported. It includes modules for creating graphical user interfaces, connecting to relational databases,
    generating pseudorandom numbers, arithmetic with arbitrary-precision decimals, manipulating regular expressions, and
    unit testing.
</p>
<p>Some parts of the standard library are covered by specifications—for example, the Web Server Gateway Interface (WSGI)
    implementation <code>wsgiref</code> follows PEP 333—but most are specified by their code, internal documentation,
    and test suites. However, because most of the standard library is cross-platform Python code, only a few modules
    need altering or rewriting for variant implementations.
</p>
<p>As of January 2022, the Python Package Index (PyPI), the official repository for third-party Python software,
    contains over 350,000 packages with a wide range of functionality, including:
</p>

<h2>Development environments</h2>
<link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1033289096">
<p>Most Python implementations (including CPython) include a read–eval–print loop (REPL), permitting them to function as
    a command line interpreter for which users enter statements sequentially and receive results immediately.
</p>
<p>Python also comes with an Integrated development environment (IDE) called IDLE, which is more beginner-oriented.
</p>
<p>Other shells, including IDLE and IPython, add further abilities such as improved auto-completion, session state
    retention and syntax highlighting.
</p>
<p>As well as standard desktop integrated development environments, there are Web browser-based IDEs, including
    SageMath, for developing science- and math-related programs; PythonAnywhere, a browser-based IDE and hosting
    environment; and Canopy IDE, a commercial IDE emphasizing scientific computing.</p>

<h2>Implementations</h2>
<link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1033289096">

<h3>Reference implementation</h3>
<p>CPython is the reference implementation of Python. It is written in C, meeting the C89 standard (Python 3.11 uses
    C11) with several select C99 features (With later C versions out, it is considered outdated. CPython includes its
    own C extensions, but third-party extensions are not limited to older C versions—e.g. they can be implemented with
    C11 or C++.) It compiles Python programs into an intermediate bytecode which is then executed by its virtual
    machine. CPython is distributed with a large standard library written in a mixture of C and native Python, and is
    available for many platforms, including Windows (starting with Python 3.9, the Python installer deliberately fails
    to install on Windows 7 and 8; Windows XP was supported until Python 3.5) and most modern Unix-like systems,
    including macOS (and Apple M1 Macs, since Python 3.9.1, with experimental installer) and unofficial support for e.g.
    VMS. Platform portability was one of its earliest priorities. (During Python 1 and 2 development, even OS/2 and
    Solaris were supported, but support has since been dropped for many platforms.)
</p>

<h3>Other implementations</h3>
<ul>
    <li>PyPy is a fast, compliant interpreter of Python 2.7 and 3.8. Its just-in-time compiler brings a significant
        speed improvement over CPython but some libraries written in C cannot be used with it.</li>
    <li>Stackless Python is a significant fork of CPython that implements microthreads; it does not use the call stack
        in the same way, thus allowing massively concurrent programs. PyPy also has a stackless version.</li>
    <li>MicroPython and CircuitPython are Python 3 variants optimized for microcontrollers, including Lego Mindstorms
        EV3.</li>
    <li>Pyston is a variant of the Python runtime that uses just-in-time compilation to speed up the execution of Python
        programs.</li>
    <li>Cinder is a performance-oriented fork of CPython 3.8 that contains a number of optimizations including bytecode
        inline caching, eager evaluation of coroutines, a method-at-a-time JIT and an experimental bytecode compiler.
    </li>
</ul>

<h3>Unsupported implementations</h3>
<p>Other just-in-time Python compilers have been developed, but are now unsupported:
</p>
<ul>
    <li>Google began a project named Unladen Swallow in 2009, with the aim of speeding up the Python interpreter
        fivefold by using the LLVM, and of improving its multithreading ability to scale to thousands of cores, while
        ordinary implementations suffer from the global interpreter lock.</li>
    <li>Psyco is a discontinued just-in-time specializing compiler that integrates with CPython and transforms bytecode
        to machine code at runtime. The emitted code is specialized for certain data types and is faster than the
        standard Python code. Psyco does not support Python 2.7 or later.</li>
    <li>PyS60 was a Python 2 interpreter for Series 60 mobile phones released by Nokia in 2005. It implemented many of
        the modules from the standard library and some additional modules for integrating with the Symbian operating
        system. The Nokia N900 also supports Python with GTK widget libraries, enabling programs to be written and run
        on the target device.</li>
</ul>

<h3>Cross-compilers to other languages</h3>
<p>There are several compilers to high-level object languages, with either unrestricted Python, a restricted subset of
    Python, or a language similar to Python as the source language:
</p>
<ul>
    <li>Brython, Transcrypt and Pyjs (latest release in 2012) compile Python to JavaScript.</li>
    <li>Cython compiles (a superset of) Python 2.7 to C (while the resulting code is also usable with Python 3 and also
        e.g. C++).</li>
    <li>Nuitka compiles Python into C.</li>
    <li>Numba uses LLVM to compile a subset of Python to machine code.</li>
    <li>Pythran compiles a subset of Python 3 to C++ (C++11).</li>
    <li>RPython can be compiled to C, and is used to build the PyPy interpreter of Python.</li>
</ul>
<p>Specialized:
</p>
<ul>
    <li>MyHDL is a Python-based hardware description language (HDL), that converts MyHDL code to Verilog or VHDL code.
    </li>
</ul>
<p>Older projects (or not to be used with Python 3.x and latest syntax):
</p>
<ul>
    <li>Google's Grumpy (latest release in 2017) transpiles Python 2 to Go.</li>
    <li>IronPython allows running Python 2.7 programs (and an alpha, released in 2021, is also available for
        "Python 3.4, although features and behaviors from later versions may be included") on the .NET Common Language
        Runtime.</li>
    <li>Jython compiles Python 2.7 to Java bytecode, allowing the use of the Java libraries from a Python program.</li>
    <li>Pyrex (latest release in 2010) and Shed Skin (latest release in 2013) compile to C and C++ respectively.</li>
</ul>

<h3>Performance</h3>
<p>Performance comparison of various Python implementations on a non-numerical (combinatorial) workload was presented at
    EuroSciPy '13. Python's performance compared to other programming languages is also benchmarked by The Computer
    Language Benchmarks Game.</p>

<h2>Development</h2>
<p>Python's development is conducted largely through the <i>Python Enhancement Proposal</i> (PEP) process, the primary
    mechanism for proposing major new features, collecting community input on issues, and documenting Python design
    decisions. Python coding style is covered in PEP 8. Outstanding PEPs are reviewed and commented on by the Python
    community and the steering council.</p>
<p>Enhancement of the language corresponds with the development of the CPython reference implementation. The mailing
    list python-dev is the primary forum for the language's development. Specific issues are discussed in the Roundup
    bug tracker hosted at bugs.python.org. Development originally took place on a self-hosted source-code repository
    running Mercurial, until Python moved to GitHub in January 2017.</p>
<p>CPython's public releases come in three types, distinguished by which part of the version number is incremented:
</p>
<ul>
    <li>Backward-incompatible versions, where code is expected to break and needs to be manually ported. The first part
        of the version number is incremented. These releases happen infrequently—version 3.0 was released 8 years after
        2.0. According to Guido van Rossum, a version 4.0 is very unlikely to ever happen.</li>
    <li>Major or "feature" releases are largely compatible with the previous version but introduce new features. The
        second part of the version number is incremented. Starting with Python 3.9, these releases are expected to
        happen annually. Each major version is supported by bug fixes for several years after its release.</li>
    <li>Bugfix releases, which introduce no new features, occur about every 3 months and are made when a sufficient
        number of bugs have been fixed upstream since the last release. Security vulnerabilities are also patched in
        these releases. The third and final part of the version number is incremented.</li>
</ul>
<p>Many alpha, beta, and release-candidates are also released as previews and for testing before final releases.
    Although there is a rough schedule for each release, they are often delayed if the code is not ready. Python's
    development team monitors the state of the code by running the large unit test suite during development.</p>
<p>The major academic conference on Python is PyCon. There are also special Python mentoring programmes, such as
    Pyladies.
</p>
<p>Python 3.10 deprecated <code>wstr</code> (to be removed in Python 3.12; meaning Python extensions need to be modified
    by then), and added pattern matching to the language.</p>

<h2>API documentation generators</h2>
<p>Tools that can generate documentation for Python API include pydoc (available as part of the standard library),
    Sphinx, Pdoc and its forks, Doxygen and Graphviz, among others.</p>

<h2>Naming</h2>
<p>Python's name is derived from the British comedy group Monty Python, whom Python creator Guido van Rossum enjoyed
    while developing the language. Monty Python references appear frequently in Python code and culture; for example,
    the metasyntactic variables often used in Python literature are <i>spam</i> and <i>eggs</i> instead of the
    traditional <i>foo</i> and <i>bar</i>. The official Python documentation also contains various references to Monty
    Python routines.</p>
<p>The prefix <i>Py-</i> is used to show that something is related to Python. Examples of the use of this prefix in
    names of Python applications or libraries include Pygame, a binding of SDL to Python (commonly used to create
    games); PyQt and PyGTK, which bind Qt and GTK to Python respectively; and PyPy, a Python implementation originally
    written in Python.
</p>

<h2>Popularity</h2>
<p>Since 2003, Python has consistently ranked in the top ten most popular programming languages in the TIOBE Programming
    Community Index where, as of October 2021, it is the most popular language (ahead of Java, and C). It was selected
    Programming Language of the Year (for "the highest rise in ratings in a year") in 2007, 2010, 2018, and 2020 (the
    only language to do so four times).</p>
<p>An empirical study found that scripting languages, such as Python, are more productive than conventional languages,
    such as C and Java, for programming problems involving string manipulation and search in a dictionary, and
    determined that memory consumption was often "better than Java and not much worse than C or C++".</p>
<p>Large organizations that use Python include Wikipedia, Google, Yahoo!, CERN, NASA, Facebook, Amazon, Instagram,
    Spotify, and some smaller entities like ILM and ITA. The social news networking site Reddit was written mostly in
    Python.</p>

<h2>Uses</h2>
<link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1033289096">

<p>Python can serve as a scripting language for web applications, e.g., via mod_wsgi for the Apache webserver. With Web
    Server Gateway Interface, a standard API has evolved to facilitate these applications. Web frameworks like Django,
    Pylons, Pyramid, TurboGears, web2py, Tornado, Flask, Bottle, and Zope support developers in the design and
    maintenance of complex applications. Pyjs and IronPython can be used to develop the client-side of Ajax-based
    applications. SQLAlchemy can be used as a data mapper to a relational database. Twisted is a framework to program
    communications between computers, and is used (for example) by Dropbox.
</p>
<p>Libraries such as NumPy, SciPy, and Matplotlib allow the effective use of Python in scientific computing, with
    specialized libraries such as Biopython and Astropy providing domain-specific functionality. SageMath is a computer
    algebra system with a notebook interface programmable in Python: its library covers many aspects of mathematics,
    including algebra, combinatorics, numerical mathematics, number theory, and calculus. OpenCV has Python bindings
    with a rich set of features for computer vision and image processing.</p>
<p>Python is commonly used in artificial intelligence projects and machine learning projects with the help of libraries
    like TensorFlow, Keras, Pytorch, and Scikit-learn. As a scripting language with a modular architecture, simple
    syntax, and rich text processing tools, Python is often used for natural language processing.</p>
<p>Python can also be used to create games, with libraries such as Pygame, which can make 2D games.
</p>
<p>Python has been successfully embedded in many software products as a scripting language, including in finite element
    method software such as Abaqus, 3D parametric modeler like FreeCAD, 3D animation packages such as 3ds Max, Blender,
    Cinema 4D, Lightwave, Houdini, Maya, modo, MotionBuilder, Softimage, the visual effects compositor Nuke, 2D imaging
    programs like GIMP, Inkscape, Scribus and Paint Shop Pro, and musical notation programs like scorewriter and
    capella. GNU Debugger uses Python as a pretty printer to show complex structures such as C++ containers. Esri
    promotes Python as the best choice for writing scripts in ArcGIS. It has also been used in several video games, and
    has been adopted as first of the three available programming languages in Google App Engine, the other two being
    Java and Go.</p>
<p>Many operating systems include Python as a standard component. It ships with most Linux distributions, AmigaOS 4
    (using Python 2.7), FreeBSD (as a package), NetBSD, and OpenBSD (as a package) and can be used from the command line
    (terminal). Many Linux distributions use installers written in Python: Ubuntu uses the Ubiquity installer, while Red
    Hat Linux and Fedora Linux use the Anaconda installer. Gentoo Linux uses Python in its package management system,
    Portage.
</p>
<p>Python is used extensively in the information security industry, including in exploit development.</p>
<p>Most of the Sugar software for the One Laptop per Child XO, now developed at Sugar Labs, is written in Python. The
    Raspberry Pi single-board computer project has adopted Python as its main user-programming language.
</p>
<p>LibreOffice includes Python and intends to replace Java with Python. Its Python Scripting Provider is a core feature
    since Version 4.0 from 7 February 2013.
</p>

<h2>Languages influenced by Python</h2>
<p>Python's design and philosophy have influenced many other programming languages:
</p>
<ul>
    <li>Boo uses indentation, a similar syntax, and a similar object model.</li>
    <li>Cobra uses indentation and a similar syntax, and its <i>Acknowledgements</i> document lists Python first among
        languages that influenced it.</li>
    <li>CoffeeScript, a programming language that cross-compiles to JavaScript, has Python-inspired syntax.</li>
    <li>ECMAScript/JavaScript borrowed iterators and generators from Python.</li>
    <li>GDScript, a scripting language very similar to Python, built-in to the Godot game engine.</li>
    <li>Go is designed for the "speed of working in a dynamic language like Python" and shares the same syntax for
        slicing arrays.</li>
    <li>Groovy was motivated by the desire to bring the Python design philosophy to Java.</li>
    <li>Julia was designed to be "as usable for general programming as Python".</li>
    <li>Nim uses indentation and similar syntax.</li>
    <li>Ruby's creator, Yukihiro Matsumoto, has said: "I wanted a scripting language that was more powerful than Perl,
        and more object-oriented than Python. That's why I decided to design my own language."</li>
    <li>Swift, a programming language developed by Apple, has some Python-inspired syntax.</li>
</ul>
<p>Python's development practices have also been emulated by other languages. For example, the practice of requiring a
    document describing the rationale for, and issues surrounding, a change to the language (in Python, a PEP) is also
    used in Tcl, Erlang, and Swift.</p>

<h2>See also</h2>
<ul>
    <li>Python syntax and semantics</li>
    <li>pip (package manager)</li>
    <li>List of programming languages</li>
    <li>History of programming languages</li>
    <li>Comparison of programming languages</li>
</ul>

<h2>References</h2>
<h3>Sources</h3>
<ul>
    <li>
        <link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1067248974"><cite
            class="citation web cs1">"Python for Artificial Intelligence". Wiki.python.org. 19 July 2012. Archived from
            the original on 1 November 2012<span>. Retrieved <span>3 December</span> 2012</span>.</cite><span
            title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Python+for+Artificial+Intelligence&amp;rft.pub=Wiki.python.org&amp;rft.date=2012-07-19&amp;rft_id=https%3A%2F%2Fwiki.python.org%2Fmoin%2FPythonForArtificialIntelligence&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3APython+%28programming+language%29"></span>
    </li>
    <li>
        <link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1067248974"><cite id="CITEREFPaine2005"
            class="citation journal cs1">Paine, Jocelyn, ed. (August 2005). "AI in Python". <i>AI Expert Newsletter</i>.
            Amzi!. Archived from the original on 26 March 2012<span>. Retrieved <span>11 February</span>
                2012</span>.</cite><span
            title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=AI+Expert+Newsletter&amp;rft.atitle=AI+in+Python&amp;rft.date=2005-08&amp;rft_id=http%3A%2F%2Fwww.ainewsletter.com%2Fnewsletters%2Faix_0508.htm%23python_ai_ai&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3APython+%28programming+language%29"></span>
    </li>
    <li>
        <link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1067248974"><cite
            class="citation web cs1">"PyAIML 0.8.5 : Python Package Index". Pypi.python.org<span>. Retrieved <span>17
                    July</span> 2013</span>.</cite><span
            title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=PyAIML+0.8.5+%3A+Python+Package+Index&amp;rft.pub=Pypi.python.org&amp;rft_id=https%3A%2F%2Fpypi.python.org%2Fpypi%2FPyAIML&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3APython+%28programming+language%29"></span>
    </li>
    <li>
        <link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1067248974"><cite
            id="CITEREFRussellNorvig2009" class="citation book cs1">Russell, Stuart J. &amp; Norvig, Peter (2009).
            <i>Artificial Intelligence: A Modern Approach</i> (3rd ed.). Upper Saddle River, NJ: Prentice Hall.
            ISBN <bdi>978-0-13-604259-4</bdi>.</cite><span
            title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Artificial+Intelligence%3A+A+Modern+Approach&amp;rft.place=Upper+Saddle+River%2C+NJ&amp;rft.edition=3rd&amp;rft.pub=Prentice+Hall&amp;rft.date=2009&amp;rft.isbn=978-0-13-604259-4&amp;rft.aulast=Russell&amp;rft.aufirst=Stuart+J.&amp;rft.au=Norvig%2C+Peter&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3APython+%28programming+language%29"></span>
    </li>
</ul>

<h2>Further reading</h2>
<ul>
    <li>
        <link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1067248974"><cite id="CITEREFDowney2012"
            class="citation book cs1">Downey, Allen B. (May 2012). <i>Think Python: How to Think Like a Computer
                Scientist</i> (Version 1.6.6 ed.). ISBN <bdi>978-0-521-72596-5</bdi>.</cite><span
            title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Think+Python%3A+How+to+Think+Like+a+Computer+Scientist&amp;rft.edition=Version+1.6.6&amp;rft.date=2012-05&amp;rft.isbn=978-0-521-72596-5&amp;rft.aulast=Downey&amp;rft.aufirst=Allen+B.&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3APython+%28programming+language%29"></span>
    </li>
    <li>
        <link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1067248974"><cite
            id="CITEREFHamilton2008" class="citation news cs1">Hamilton, Naomi (5 August 2008). "The A-Z of Programming
            Languages: Python". <i>Computerworld</i>. Archived from the original on 29 December 2008<span>. Retrieved
                <span>31 March</span> 2010</span>.</cite><span
            title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Computerworld&amp;rft.atitle=The+A-Z+of+Programming+Languages%3A+Python&amp;rft.date=2008-08-05&amp;rft.aulast=Hamilton&amp;rft.aufirst=Naomi&amp;rft_id=http%3A%2F%2Fwww.computerworld.com.au%2Findex.php%2Fid%3B66665771&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3APython+%28programming+language%29"></span>
    </li>
    <li>
        <link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1067248974"><cite id="CITEREFLutz2013"
            class="citation book cs1">Lutz, Mark (2013). <i>Learning Python</i> (5th ed.). O'Reilly Media.
            ISBN <bdi>978-0-596-15806-4</bdi>.</cite><span
            title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Learning+Python&amp;rft.edition=5th&amp;rft.pub=O%27Reilly+Media&amp;rft.date=2013&amp;rft.isbn=978-0-596-15806-4&amp;rft.aulast=Lutz&amp;rft.aufirst=Mark&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3APython+%28programming+language%29"></span>
    </li>
    <li>
        <link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1067248974"><cite id="CITEREFPilgrim2004"
            class="citation book cs1">Pilgrim, Mark (2004). <span title="Free registration required"><i>Dive into
                    Python</i></span>. Apress. ISBN <bdi>978-1-59059-356-1</bdi>.</cite><span
            title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Dive+into+Python&amp;rft.pub=Apress&amp;rft.date=2004&amp;rft.isbn=978-1-59059-356-1&amp;rft.aulast=Pilgrim&amp;rft.aufirst=Mark&amp;rft_id=https%3A%2F%2Farchive.org%2Fdetails%2Fdiveintopython0000pilg&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3APython+%28programming+language%29"></span>
    </li>
    <li>
        <link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1067248974"><cite id="CITEREFPilgrim2009"
            class="citation book cs1">Pilgrim, Mark (2009). <i>Dive into Python 3</i>. Apress.
            ISBN <bdi>978-1-4302-2415-0</bdi>.</cite><span
            title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Dive+into+Python+3&amp;rft.pub=Apress&amp;rft.date=2009&amp;rft.isbn=978-1-4302-2415-0&amp;rft.aulast=Pilgrim&amp;rft.aufirst=Mark&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3APython+%28programming+language%29"></span>
    </li>
    <li>
        <link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1067248974"><cite
            id="CITEREFSummerfield2009" class="citation book cs1">Summerfield, Mark (2009). <i>Programming in Python
                3</i> (2nd ed.). Addison-Wesley Professional. ISBN <bdi>978-0-321-68056-3</bdi>.</cite><span
            title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Programming+in+Python+3&amp;rft.edition=2nd&amp;rft.pub=Addison-Wesley+Professional&amp;rft.date=2009&amp;rft.isbn=978-0-321-68056-3&amp;rft.aulast=Summerfield&amp;rft.aufirst=Mark&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3APython+%28programming+language%29"></span>
    </li>
</ul>

<h2>External links</h2>

<ul>
    <li><span><span>Official website</span></span> </li>
</ul>







<p class="mw-empty-elt">
</p>